package PredictorSoftware;

import java.util.Stack;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Set;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class Simulation 
{
	private static int getNum;
	private static int j;
	private static String Datatostring;
	private static Stack<String> valuetoStack = new Stack<String>();
	
	void runSim() throws IOException 
	{
		 System.out.println("______________________________");
		 System.out.println("  Simulation started...       ");
		 System.out.println("______________________________");
		 
		 // Using While and for loop to run random numbers for Lotto simulation
		 int n = 0;
		 while(n < 65)
		 {
	        n ++;
		     /*
		      * Start random number generator.
		      * Catching repeating numbers on the 
		      * 1000 times!!! 
		      */
			 System.out.print(n + " = ");
			 ArrayList<Object> lottoNum = new ArrayList<Object>();

			// For loop with random number generator
			    for(int k = (int)(Math.random()*6 + 1); k < 54; k++)
			    {
			    	lottoNum.add(k + 1);
			    }
			    Collections.shuffle(lottoNum);// Catching repeating numbers
			    
			    for(j =0; j < 6; j++)
			    {
			      getNum = (int) lottoNum.get(j);
			      System.out.print(getNum + "."); // Display the numbers
			      Datatostring = (new Integer((int) getNum).toString() + ". ");
			    	
			      
			   // Saving value on stack!
			   valuetoStack.push(Datatostring); 
			      
			   // Copy data to text document
				    // Calling function ---> try catch IOException due to function structure
			    
			  
				      try {
						 textFile();// function
					    } 
				        catch (IOException e) 
				        {
						 // TODO Auto-generated catch block
						 e.printStackTrace();
					    }
			   
			    }
			    System.out.println(" ");
			
		 }
		 
		 System.out.println("______________________________");
		 System.out.println("  Simulation ended            ");
		 System.out.println("______________________________");
		 
		 // Calling function to see the average numbers that is repeated numbers!
		 avarageNum();
		 
		 // Calling menu function from the main class!
		 predictor_Main.proMenu();
	}
	// Save do text file function!
	public static void textFile() throws IOException
    {     
        // Initialize the list
        ArrayList<String[]> list = new ArrayList<String[]>();
        // Calling to random string generated by the randGenerator function! 
        list.add(new String[] {Datatostring});
        // File writer
        FileWriter Datawriter = new FileWriter("NumOUTPUT.txt",true); // by adding true at the end is save to text file without overwriting older data
        // Headers
        //Datawriter.flush();
        // For loop for list data
         for(String[] arr: list)
         {
            String appender = "";
            for(String s : arr)
            {
                Datawriter.write(appender + s);
               appender = ",";
            }
            //Datawriter.write("\n");
            Datawriter.flush();
         }
         Datawriter.close();
     }
	// Function to get repeated numbers from drawings
	public static void avarageNum() throws IOException
	{
		// Read data from text file
		HashMap<String, Integer> wordCountMap = new HashMap<String, Integer>();
	     
        BufferedReader reader = null;
         
        try
        {
            //Creating BufferedReader object
             
            reader = new BufferedReader(new FileReader("NumOUTPUT.txt"));
             
            //Reading the first line into currentLine
             
            String currentLine = reader.readLine();
             
            while (currentLine != null)
            {    
                // Splitting the currentLine into words    
                String[] numbers = currentLine.toLowerCase().split(" ");
                 
                // Iterating each word
                for (String word : numbers)
                {
                    // If word is already present in wordCountMap, updating its count
                     
                    if(wordCountMap.containsKey(word))
                    {    
                        wordCountMap.put(word, wordCountMap.get(word) + 1);
                    }
                     
                    // Otherwise inserting the word as key and 1 as its value
                    else
                    {
                        wordCountMap.put(word, 1);
                    }
                }
                 
                // Reading next line into currentLine
                 
                currentLine = reader.readLine();
            }
             
            // Getting the most repeated word and its occurrence
             
            String mostRepeatedNum = null;
             
            int count = 0;
             
            Set<java.util.Map.Entry<String, Integer>> entrySet = wordCountMap.entrySet();
             
            for (java.util.Map.Entry<String, Integer> entry : entrySet)
            {
                if(((java.util.Map.Entry<String, Integer>) entry).getValue() > count)
                {  
                		mostRepeatedNum = entry.getKey();        
                        count = entry.getValue();            
                }
            }
             
            System.out.println("The most repeated number is : " + mostRepeatedNum);
             
            System.out.println("Times  repeated : " + count);
        } 
        catch (IOException e) 
        {
            e.printStackTrace();
        }
        finally
        {
            try
            {
                reader.close(); //Closing the reader
            }
            catch (IOException e) 
            {
                e.printStackTrace();
            }
        }
		
	}
}
